swagger: "2.0"
info:
  description: "Back-end pour le projet Accés Sécurisé - projet open innovation 2020-2021"
  version: "1.0.0"
  title: "Back-End"
basePath: "/"
tags:
- name: "Authentification"
  description: ""
- name: "User"
  description: ""
- name: "Boitier"
  description: ""
schemes:
- "http"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
  Role:
    type: basic
    description: "Roles required: Admin"
paths:
  /auth/login:
    post:
      tags:
      - "Authentification"
      summary: "Authentification d'un user"
      description: ""
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "doit contenir le username et le password"
        required: true
        schema:
          type: "object"
          properties:
            username:
              type: "string"
            password:
              type: "string"
      responses:
        "400":
          description: "BadRequest"
        "404":
          description: "User not registered"
        "401":
          description: "Username or password not valid"
        "200":
          description: "User successfully connected"
          schema:
            type: "object"
            properties:
              access_token:
                type: "string"
              refresh_token:
                type: "string"
  /auth/register:
    post:
      tags:
      - "Authentification"
      summary: "Enregistrement d'un utilisateur"
      description: ""
      operationId: "register"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "doit contenir le username et le password"
        required: true
        schema:
          type: "object"
          properties:
            username:
              type: "string"
            password:
              type: "string"
      responses:
        "400":
          description: "BadRequest"
        "409":
          description: "User is already been register"
        "200":
          description: "User successfully created"
          schema:
            type: "object"
            properties:
              access_token:
                type: "string"
              refresh_token:
                type: "string"
  /auth/refresh-token:
    post:
      tags:
      - "Authentification"
      summary: "Refraichi le jeton d'accés"
      description: ""
      operationId: "refresh-token"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "doit contenir le refresh-token"
        required: true
        schema:
          type: "object"
          properties:
            refresh_token:
              type: "string"
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "200":
          description: "User successfully connected"
          schema:
            type: "object"
            properties:
              access_token:
                type: "string"
              refresh_token:
                type: "string"
  /auth/logout:
    delete:
      tags:
      - "Authentification"
      summary: "Déconnecte l'utilisateur"
      description: ""
      operationId: "logout"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "doit contenir le refresh-token"
        required: true
        schema:
          type: "object"
          properties:
            refresh_token:
              type: "string"
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "200":
          description: "User successfully disconnected"
  /user:
    get:
      tags:
      - "User"
      summary: "Affiches tous les utilisateurs"
      description: "Page d'amdministration uniquement"
      operationId: "alluser"
      security:
        - Bearer: []
        - Role: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "All Users"
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/User"
  /user/{username}:
    get:
      tags:
      - "User"
      summary: "Affiche un utilisateur"
      description: "Affiche les details d'un utilisateur (uniquement accessible pour un administrateur ou par l'utilisateur connecté)"
      operationId: "getuser"
      security:
        - Bearer: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: username
        in: "path"
        description: "username de l'utilisateur"
        required: true
        type: 'string'
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "200":
          description: "User info"
          schema:
            $ref: "#/definitions/User"
    put:
      tags:
      - "User"
      summary: "Update un utilisateur"
      description: "Administrateur uniquement"
      operationId: "updateuser"
      security:
        - Bearer: []
        - Role: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: username
        in: "path"
        description: "username de l'utilisateur"
        required: true
        type: 'string'
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "200":
          description: "User successfully updated"
          schema:
            $ref: "#/definitions/User"
    delete:
      tags:
      - "User"
      summary: "Supprime un utilisateur"
      description: "Administrateur uniquement"
      operationId: "deleteuser"
      security:
        - Bearer: []
        - Role: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: username
        in: "path"
        description: "username de l'utilisateur"
        required: true
        type: 'string'
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "200":
          description: "User successfully deleted"
  /user/{username}/owner:
    get:
      tags:
      - "User"
      summary: "Affiche les boitiers en posséssion d'un utilisateur"
      description: "Uniquement accessible pour un administrateur ou par l'utilisateur connecté"
      operationId: "getuserowner"
      security:
        - Bearer: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: username
        in: "path"
        description: "username de l'utilisateur"
        required: true
        type: 'string'
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "200":
          description: "liste des boitiers possédé par l'utilisateur"
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/Owner"
    post:
      tags:
      - "User"
      summary: "Ajoute un boitier à un utilisateur"
      description: "Uniquement si l'utilisateur connecté posséde le boitier"
      operationId: "addowneruser"
      security:
        - Bearer: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: username
        in: "path"
        description: "username de l'utilisateur"
        required: true
        type: 'string'
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "User or Boitier not found"
        "409":
          description: "User is already owner of this boitier"
        "200":
          description: "Boitier successfully owned by the user"
    delete:
      tags:
      - "User"
      summary: "Supprime un boitier à un utilisateur"
      description: "Administrateur uniquement"
      operationId: "deleteowneruser"
      security:
        - Bearer: []
        - Role: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: username
        in: "path"
        description: "username de l'utilisateur"
        required: true
        type: 'string'
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "User or Boitier not found"
        "406":
          description: "User can not remove himself"
        "200":
          description: "Boitier is no longer owned by User"
  /boitier:
    get:
      tags:
      - "Boitier"
      summary: "Affiches tous les boitiers"
      description: "Page d'amdministration uniquement"
      operationId: "allboitier"
      security:
        - Bearer: []
        - Role: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "All Users"
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/Boitier"
    post:
      tags:
      - "Boitier"
      summary: "Créer un boitier"
      description: ""
      operationId: "createboitier"
      security:
        - Bearer: []
        - Role: []
      parameters:
      - in: "body"
        name: "body"
        description: "doit contenir le code du boitier (unique pour chaque boitier)"
        required: true
        schema:
          type: "object"
          properties:
            code:
              type: "string"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "409":
          description: "Boitier is already been register"
        "200":
          description: "Boitier successfully created"
          schema:
            $ref: "#/definitions/Boitier"
  /boitier/{code}:
    get:
      tags:
      - "Boitier"
      summary: "Affiche un boitier"
      description: "Affiche les details d'un boitier (uniquement accessible pour un administrateur ou par l'utilisateur qui posséde le boitier)"
      operationId: "getboitier"
      security:
        - Bearer: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: code
        in: "path"
        description: "code du boitier"
        required: true
        type: 'string'
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "Boitier not found"
        "200":
          description: "Boitier info"
          schema:
            $ref: "#/definitions/Boitier"
    put:
      tags:
      - "Boitier"
      summary: "Update un boitier"
      description: "Administrateur uniquement"
      operationId: "updateboitier"
      security:
        - Bearer: []
        - Role: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: code
        in: "path"
        description: "code du boitier"
        required: true
        type: 'string'
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "Boitier not found"
        "200":
          description: "Boitier successfully updated"
          schema:
            $ref: "#/definitions/Boitier"
    delete:
      tags:
      - "Boitier"
      summary: "Supprime un boitier"
      description: "Administrateur uniquement"
      operationId: "deleteboitier"
      security:
        - Bearer: []
        - Role: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: code
        in: "path"
        description: "code du boitier"
        required: true
        type: 'string'
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "Boitier not found"
        "200":
          description: "Boitier successfully deleted"
  /boitier/{code}/right:
    get:
      tags:
      - "Boitier"
      summary: "Affiche les utilisateurs qui ont accès à un boitier"
      description: "Uniquement si l'utilisateur connecté posséde le boitier"
      operationId: "getright"
      security:
        - Bearer: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: code
        in: "path"
        description: "code du boitier"
        required: true
        type: 'string'
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "Boitier not found"
        "200":
          description: "Liste des utilisateurs qui ont les droits d'accéss au boitier"
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/Authorization"
    post:
      tags:
      - "Boitier"
      summary: "Ajoute les droits d'accès d'un boitier à un utilisateur"
      description: "Uniquement si l'utilisateur connecté posséde le boitier"
      operationId: "addright"
      security:
        - Bearer: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: code
        in: "path"
        description: "code du boitier"
        required: true
        type: 'string'
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "User or Boitier not found"
        "409":
          description: "User already has the right of this boitier"
        "200":
          description: "Right successfully added to the user"
          schema:
            $ref: "#/definitions/Boitier"
    delete:
      tags:
      - "Boitier"
      summary: "Supprime les droits d'accés d'un boitier à un utilisateur"
      description: "Uniquement si l'utilisateur connecté posséde le boitier"
      operationId: "deleteright"
      security:
        - Bearer: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: code
        in: "path"
        description: "code du boitier"
        required: true
        type: 'string'
      responses:
        "400":
          description: "BadRequest"
        "401":
          description: "Unauthorized"
        "404":
          description: "User or Boitier not found"
        "406":
          description: "Can not remove an owner"
        "200":
          description: "Boitier is no longer owned by User"
definitions:
  User:
    type: "object"
    properties:
      username:
        type: "string"
      owner:
        $ref: "#/definitions/Owner"
  Owner:
    type: array
    items:
      type: object
      properties:
        boitierId:
          type: "string"
  Boitier:
    type: "object"
    properties:
      code:
        type: "string"
      authorization:
        $ref: "#/definitions/Authorization"
  Authorization:
    type: array
    items:
      type: object
      properties:
        userId:
          type: "string"
